> [1017. 负二进制转换](https://leetcode.cn/problems/convert-to-base-2/)

[TOC]

# 题目

给你一个整数 `n` ，以二进制字符串的形式返回该整数的 **负二进制（`base -2`）**表示。

**注意，**除非字符串就是 `"0"`，否则返回的字符串中不能含有前导零。

# 题目分析

## 思路分析

这道题求整数的 **负二进制**，实际上与求二进制的思路是类似的。二进制的求法是：每次对 `n` 取余除 `2`，依次拼接余数然后反转即为结果。如下图：

![1714273844-lgWalY-1714273843644887.png](https://pic.leetcode.cn/1714273844-lgWalY-1714273843644887.png)

而对于 **负二进制**，我们同样可以用这个做法。但是由于是负数，我们在取余的时候，可能会出现负数。但是二进制是没有负数的，因此我们要将**余数为负数修正为余数为正数，即 `-1` 修正为 `1`，对应的商就应该增加 `1`**。如下图所示：

![1714273853-jZQGqm-image-20240428110050693.png](https://pic.leetcode.cn/1714273853-jZQGqm-image-20240428110050693.png)

# 代码

* []

```Java
class Solution {
    public String baseNeg2(int n) {
        if(n == 0)return "0";   // 0直接返回
        StringBuilder res = new StringBuilder();
        // 类似十进制转二进制的方法，只是余数如果为负数需要修正
        while(n != 0){
            int mod = n % (-2);
            n = n / (-2);
            if(mod == -1){
                // 修正余数为-1->1，对应商也要加1
                n++;
                mod = 1;
            }
            res.append(mod);
        }
        return res.reverse().toString();     // 生成的二进制是逆序的，需要反转
    }
}
```

* []

```Python
class Solution:
    def baseNeg2(self, n: int) -> str:
        if n == 0: return "0"   # 0直接返回
        res = ""
        # 类似十进制转二进制的方法，只是余数如果为负数需要修正
        while n != 0:
            n, mod = divmod(n, -2)
            if mod == -1:
                # 修正余数为-1->1，对应商也要加1
                n += 1        
                mod = 1
            res = str(mod) + res     # 倒序生成二进制
        return res
```

* []

```C++
class Solution {
public:
    string baseNeg2(int n) {
        if(n == 0)return "0";   // 0直接返回
        string res = "";
        // 类似十进制转二进制的方法，只是余数如果为负数需要修正
        while(n != 0){
            int mod = n % (-2); 
            n = n / (-2);
            if(mod == -1){
                // 修正余数为-1->1，对应商也要加1
                n++;        
                mod = 1;
            }
            res = to_string(mod) + res;     // 倒序生成二进制
        }
        return res;
    }
};
```

