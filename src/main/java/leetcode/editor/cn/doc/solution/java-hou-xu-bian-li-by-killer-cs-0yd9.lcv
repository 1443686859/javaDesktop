**方法一：后序遍历**

![image.png](https://pic.leetcode.cn/1676634965-RfmxYS-image.png)

* []

```java
class Solution {
    boolean[] toDelete = new boolean[1001];
    List<TreeNode> ans = new ArrayList<>();

    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
        for (int x : to_delete) toDelete[x] = true;
        if (dfs(root) != null) ans.add(root);
        return ans;
    }

    private TreeNode dfs(TreeNode root) {
        if (root == null) return null;
        root.left = dfs(root.left);
        root.right = dfs(root.right);
        if (toDelete[root.val]) {
            if (root.left != null) ans.add(root.left);
            if (root.right != null) ans.add(root.right);
            return null;
        }
        return root;
    }
}
```

**复杂度分析**
- 时间复杂度：$O(n)$。
- 空间复杂度：$O(n)$。

