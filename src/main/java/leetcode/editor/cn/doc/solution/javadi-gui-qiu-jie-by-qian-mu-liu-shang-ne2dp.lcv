一般树类的题目，本人喜欢写递归。
先说下思路吧，题目的要求是我们对每条分支进行累计，如果该分支的累计和小于我们给定的期望目标limit，就将其删除，也就是从树中去掉。
这里有两个点：
1. 求每条分支的和。
2. 根据累计的和将树中不符合要求的部分剔除。

确定好后，我们可以这么做，先累计每条分支的和，也就是遍历这个节点下的所有分支即子节点，当我们走到节点的结尾也就是到了叶子节点后，我们将累计结束的和进行返回（已经从头加到尾的和），这样我们所在的每个节点都能取得从前往后累计的最大和了，然后我们根据最大的和进行判断，看当前节点是否要被剔除。
然后就是排除掉一些特殊的情况，就能得到题解了。
java解法：

* 

```
class Solution {
    public TreeNode sufficientSubset(TreeNode root, int limit) {
        GetRes(root,limit,0);
        if(root.left == null && root.right==null && root.val <limit)root = null;
        return root;
    }

    public int GetRes(TreeNode root,int limit,int sum){
        if(root == null)return sum;
        //求左边
        int resLeft = GetRes(root.left,limit,sum+root.val);
        //求右边
        int resRight = GetRes(root.right,limit,sum+root.val);
        //查探最大
        int res = Math.max(resLeft,resRight);
        if(res<limit){
            root.left = root.right = null;
        }else{
            //这里存在一种特殊情况，当前项累计和大于limit，而自身的子节点中一个为空一个不为空，而不为空的那一侧累计的和小于limit，
            //所以这条分支要被删掉，而另外本就为空的那一侧和为前面累计的也就是当前和大于limit，会导致默认符合要求，
            //自身所在的这条分支不被删除，所以要做判断,对返回结果进行调整
            //不排除是本人写的比较呆导致的······
            if(root.left==null && resLeft>=limit &&(root.right != null && resRight <limit))res = limit - 1;
            else if(root.right == null && resRight>=limit &&(root.left != null && resLeft < limit))res = limit -1;

            //将不符合要求的剔除
            if(root.left != null && resLeft < limit) root.left = null;
            if(root.right != null && resRight < limit) root.right = null;
        }
        return res;
    }
}

```

