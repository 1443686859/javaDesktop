> Problem: [2698. 求一个整数的惩罚数](https://leetcode.cn/problems/find-the-punishment-number-of-an-integer/description/)

[TOC]

## 方法一：模拟（二进制枚举）

其实很简单，用$i$从$1$到$n$枚举，对于某个$i$：

将$i^2$转为字符串处理，接着用二进制从$0$到$2^{len(i^2)}-1$枚举“切割平方字符串的位置”，将每一部分的字符串相加看是否等于$i^2$即可。

+ 时间复杂度$O(n\times \log n)$（$\log n^2=2\times\log n$）
+ 空间复杂度$O(\log n)$

### AC代码

#### C++

* cpp

```cpp
class Solution {
private:
    int check(int n) {
        string to = to_string(n * n);
        int l = to.size();
        for (int mask = 0; mask < (1 << l); mask++) {
            int cnt = 0;
            int nowNum = 0;
            for (int i = 0; i < l; i++) {
                nowNum = nowNum * 10 + (to[i] - '0');
                if ((mask >> i) & 1) {  // 这一位后面隔开
                    cnt += nowNum;
                    nowNum = 0;
                }
            }
            if (cnt + nowNum == n) {  // 想着“会有结尾的i是不行的”
                return n * n;
            }
        }
        return 0;
    }
public:
    int punishmentNumber(int n) {
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            ans += check(i);
        }
        return ans;
    }
};
```

#### Python

* python

```python
class Solution:
    def check(self, n: int) -> int:
        to = str(n * n)
        l = len(to)
        for mask in range(1 << l):
            cnt = 0
            thisNum = 0
            for i in range(l):
                thisNum = thisNum * 10 + ord(to[i]) - ord('0')
                if (mask >> i) & 1:
                    cnt += thisNum
                    thisNum = 0
            if cnt + thisNum == n:
                return n * n
        return 0


    def punishmentNumber(self, n: int) -> int:
        return sum(self.check(i) for i in range(1, n + 1))
```

> 同步发文于CSDN，原创不易，转载经作者同意后请附上[原文链接](https://blog.tisfy.eu.org/2023/10/25/LeetCode%202698.%E6%B1%82%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E7%9A%84%E6%83%A9%E7%BD%9A%E6%95%B0/)哦~
> Tisfy：[https://letmefly.blog.csdn.net/article/details/134043248](https://letmefly.blog.csdn.net/article/details/134043248)

