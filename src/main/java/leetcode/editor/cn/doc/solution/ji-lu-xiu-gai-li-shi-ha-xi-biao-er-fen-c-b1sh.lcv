## 题意解读

调用 $\texttt{snap}()$ 时，复制一份当前数组，作为「历史版本」。返回这是第几个历史版本（从 $0$ 开始）。

调用 $\texttt{get}(\textit{index}, \textit{snapId})$ 时，返回第 $\textit{snapId}$ 个历史版本的下标为 $\textit{index}$ 的元素值。

## 暴力？

每次调用 $\texttt{snap}()$，就复制一份数组，可以吗？

不行，最坏情况下，复制 $50000$ 次长为 $50000$ 的数组，会「超出内存限制」。

## 思路

假设每调用一次 $\texttt{set}$，就生成一个快照（复制一份数组）。仅仅是一个元素发生变化，就去复制整个数组，这太浪费了。

能否不复制数组呢？

换个视角，调用 $\texttt{set}(\textit{index}, \textit{val})$ 时，不去修改数组，而是往 $\textit{index}$ 的**历史修改记录**末尾添加一条数据：此时的快照编号和 $\textit{val}$。

举例说明：

- 在快照编号等于 $2$ 时，调用 $\texttt{set}(0, 6)$。
- 在快照编号等于 $3$ 时，调用 $\texttt{set}(0, 1)$。
- 在快照编号等于 $3$ 时，调用 $\texttt{set}(0, 7)$。
- 在快照编号等于 $5$ 时，调用 $\texttt{set}(0, 2)$。
- 这四次调用结束后，下标 $0$ 的历史修改记录 $\textit{history}[0] = [(2,6),(3,1),(3,7),(5,2)]$，每个数对中的第一个数为调用 $\texttt{set}$ 时的快照编号，第二个数为调用 $\texttt{set}$ 时传入的 $\textit{val}$。注意历史修改记录中的快照编号是**有序**的。

那么：

- 调用 $\texttt{get}(0, 4)$。由于历史修改记录中的快照编号是有序的，我们可以在 $\textit{history}[0]$ 中**二分查找**快照编号 $\le 4$ 的最后一条修改记录，即 $(3,7)$。修改记录中的 $\textit{val}=7$ 就是答案。
- 调用 $\texttt{get}(0, 1)$。在 $\textit{history}[0]$ 中，快照编号 $\le 1$ 的记录不存在，说明在快照编号 $\le 1$ 时，我们并没有修改下标 $0$ 保存的元素，返回初始值 $0$。

关于二分查找的原理，请看视频讲解：[二分查找 红蓝染色法【基础算法精讲 04】](https://www.bilibili.com/video/BV1AP41137w7/)

对于 $\texttt{snap}()$，只需把当前快照编号加一（快照编号初始值为 $0$），返回加一前的快照编号。

* [sol-Python3]

```py
class SnapshotArray:
    def __init__(self, _: int):
        self.cur_snap_id = 0
        self.history = defaultdict(list)  # 每个 index 的历史修改记录

    def set(self, index: int, val: int) -> None:
        self.history[index].append((self.cur_snap_id, val))

    def snap(self) -> int:
        self.cur_snap_id += 1
        return self.cur_snap_id - 1

    def get(self, index: int, snap_id: int) -> int:
        # 找快照编号 <= snap_id 的最后一次修改记录
        # 等价于找快照编号 >= snap_id+1 的第一个修改记录，它的上一个就是答案
        j = bisect_left(self.history[index], (snap_id + 1,)) - 1
        return self.history[index][j][1] if j >= 0 else 0
```

* [sol-Java]

```java
class SnapshotArray {
    // 当前快照编号，初始值为 0
    private int curSnapId;

    // 每个 index 的历史修改记录
    private final Map<Integer, List<int[]>> history = new HashMap<>();

    public SnapshotArray(int length) {
    }

    public void set(int index, int val) {
        history.computeIfAbsent(index, k -> new ArrayList<>()).add(new int[]{curSnapId, val});
    }

    public int snap() {
        return curSnapId++;
    }

    public int get(int index, int snapId) {
        if (!history.containsKey(index)) {
            return 0;
        }
        List<int[]> h = history.get(index);
        int j = search(h, snapId);
        return j < 0 ? 0 : h.get(j)[1];
    }

    // 返回最大的下标 i，满足 h[i][0] <= x
    // 如果不存在则返回 -1
    private int search(List<int[]> h, int x) {
        // 开区间 (left, right)
        int left = -1;
        int right = h.size();
        while (left + 1 < right) { // 区间不为空
            // 循环不变量：
            // h[left][0] <= x
            // h[right][1] > x
            int mid = left + (right - left) / 2;
            if (h.get(mid)[0] <= x) {
                left = mid; // 区间缩小为 (mid, right)
            } else {
                right = mid; // 区间缩小为 (left, mid)
            }
        }
        // 根据循环不变量，此时 h[left][0] <= x 且 h[left+1][0] = h[right][0] > x
        // 所以 left 是最大的满足 h[left][0] <= x 的下标
        // 如果不存在，则 left 为其初始值 -1
        return left;
    }
}
```

* [sol-C++]

```cpp
class SnapshotArray {
    int cur_snap_id = 0;
    unordered_map<int, vector<pair<int, int>>> history; // 每个 index 的历史修改记录
public:
    SnapshotArray(int) {}

    void set(int index, int val) {
        history[index].emplace_back(cur_snap_id, val);
    }

    int snap() {
        return cur_snap_id++;
    }

    int get(int index, int snap_id) {
        auto& h = history[index];
        // 找快照编号 <= snap_id 的最后一次修改记录
        // 等价于找快照编号 >= snap_id+1 的第一个修改记录，它的上一个就是答案
        int j = ranges::lower_bound(h, make_pair(snap_id + 1, 0)) - h.begin() - 1;
        return j >= 0 ? h[j].second : 0;
    }
};
```

* [sol-Go]

```go
type pair struct{ snapId, val int }

type SnapshotArray struct {
    curSnapId int
    history   map[int][]pair // 每个 index 的历史修改记录
}

func Constructor(int) SnapshotArray {
    return SnapshotArray{history: map[int][]pair{}}
}

func (sa *SnapshotArray) Set(index, val int) {
    sa.history[index] = append(sa.history[index], pair{sa.curSnapId, val})
}

func (sa *SnapshotArray) Snap() int {
    sa.curSnapId++
    return sa.curSnapId - 1
}

func (sa *SnapshotArray) Get(index, snapId int) int {
    h := sa.history[index]
    // 找快照编号 <= snapId 的最后一次修改记录
    // 等价于找快照编号 >= snapId+1 的第一个修改记录，它的上一个就是答案
    j := sort.Search(len(h), func(j int) bool { return h[j].snapId >= snapId+1 }) - 1
    if j >= 0 {
        return h[j].val
    }
    return 0
}
```

* [sol-JavaScript]

```js
class SnapshotArray {
    constructor(length) {
        this.curSnapId = 0;
        this.history = new Map(); // 每个 index 的历史修改记录
    }

    set(index, val) {
        if (!this.history.has(index)) {
            this.history.set(index, []);
        }
        this.history.get(index).push([this.curSnapId, val]);
    }

    snap() {
        return this.curSnapId++;
    }

    get(index, snapId) {
        if (!this.history.has(index)) {
            return 0;
        }
        const h = this.history.get(index);
        const j = this.search(h, snapId);
        return j < 0 ? 0 : h[j][1];
    }

    // 返回最大的下标 i，满足 h[i][0] <= x
    // 如果不存在则返回 -1
    search(h, x) {
        // 开区间 (left, right)
        let left = -1;
        let right = h.length;
        while (left + 1 < right) { // 区间不为空
            // 循环不变量：
            // h[left][0] <= x
            // h[right][1] > x
            const mid = Math.floor((left + right) / 2);
            if (h[mid][0] <= x) {
                left = mid; // 区间缩小为 (mid, right)
            } else {
                right = mid; // 区间缩小为 (left, mid)
            }
        }
        // 根据循环不变量，此时 h[left][0] <= x 且 h[left+1][0] = h[right][0] > x
        // 所以 left 是最大的满足 h[left][0] <= x 的下标
        // 如果不存在，则 left 为其初始值 -1
        return left;
    }
}
```

* [sol-Rust]

```rust
use std::collections::HashMap;

struct SnapshotArray {
    cur_snap_id: i32,
    history: HashMap<i32, Vec<(i32, i32)>>, // 每个 index 的历史修改记录
}

impl SnapshotArray {
    fn new(_: i32) -> Self {
        Self {
            cur_snap_id: 0,
            history: HashMap::new(),
        }
    }

    fn set(&mut self, index: i32, val: i32) {
        self.history.entry(index).or_insert(vec![]).push((self.cur_snap_id, val));
    }

    fn snap(&mut self) -> i32 {
        self.cur_snap_id += 1;
        self.cur_snap_id - 1
    }

    fn get(&self, index: i32, snap_id: i32) -> i32 {
        if let Some(h) = self.history.get(&index) {
            let j = h.partition_point(|&(id, _)| id <= snap_id);
            if j > 0 {
                return h[j - 1].1;
            }
        }
        0
    }
}
```

#### 复杂度分析

- 时间复杂度：初始化、$\texttt{set}$、$\texttt{snap}$ 均为 $\mathcal{O}(1)$，$\texttt{get}$ 为 $\mathcal{O}(\log q)$，其中 $q$ 为 $\texttt{set}$ 的调用次数。
- 空间复杂度：$\mathcal{O}(q)$。

## 分类题单

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（矩形系列/字典序最小/贡献法）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/贪心/脑筋急转弯）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
