> Problem: [1997. 访问完所有房间的第一天](https://leetcode.cn/problems/first-day-where-you-have-been-in-all-the-rooms/description/)

[TOC]

# 思路

> 动态规划

# 解题方法

> 1.创建一个dp数组, dp[i]表示第一次到达i + 1房间需要花费的费用
> 2.因为nextVisit[i]只小于等于i, 所以只有访问两次房间i才可能走到房间i + 1
> 3.那么走到房间i + 1的天数就是
> 第一次走到房间i的花费为dp[i - 1].
> 第二次的花费就是先花费1天走到nextVisit[i], 那么从nextRoom再走到i的花费是多少呢
> 费用就是dp[i - 1] - (nextRoom == 0 ? 0 : dp[nextRoom - 1])
> 因为走到i之间我们肯定走到过nextRoom, 那么使用第一次走到i的花费 - 第一次走到nextRoom的花费, 不就是从nextRoom
> 到当前room的费用嘛.
> 然后我们再花费1天走到房间i + 1.
> 4.所以dp[i] = dp[i - 1] + (1 + dp[i - 1] - (nextRoom == 0 ? 0 : dp[nextRoom - 1]) + mod) + 1

# 复杂度

时间复杂度:

> $O(n)$

空间复杂度:

> $O(n)$

# Code

* []

```Java
class Solution {
    public int firstDayBeenInAllRooms(int[] nextVisit) {
        /*
        1.创建一个dp数组, dp[i]表示第一次到达i + 1房间需要花费的费用
        2.因为nextVisit[i]只小于等于i, 所以只有访问两次房间i才可能走到房间i + 1
        3.那么走到房间i + 1的天数就是
        第一次走到房间i的花费为dp[i - 1].
        
        第二次的花费就是先花费1天走到nextVisit[i], 那么从nextRoom再走到i的花费是多少呢
        费用就是dp[i - 1] - (nextRoom == 0 ? 0 : dp[nextRoom - 1])
        因为走到i之间我们肯定走到过nextRoom, 那么使用第一次走到i的花费 - 第一次走到nextRoom的花费, 不就是从nextRoom
        到当前room的费用嘛.
        然后我们再花费1天走到房间i + 1.

        所以dp[i] = dp[i - 1] + (1 + dp[i - 1] - (nextRoom == 0 ? 0 : dp[nextRoom - 1]) + mod) + 1

        时间复杂度O(N)
        空间复杂度O(N)
        */
        int mod = (int)1e9 + 7;
        int n = nextVisit.length;

        long[] dp = new long[n];
        dp[0] = 2;

        for(int i = 1; i < n - 1; i++){
            int nextRoom = nextVisit[i];
            dp[i] = dp[i - 1] + (1 + dp[i - 1] - (nextRoom == 0 ? 0 : dp[nextRoom - 1]) + mod) + 1;
            dp[i] = dp[i] % mod;
        }

        return (int)dp[n - 2];
    }
}
```

