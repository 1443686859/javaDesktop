### 解题思路

贪心填充第一列，遇到 $colsum[i]$ 和是 $2$ 或者 $1$，但是 $upper$ 更大时，填充第一列该位置数值为 $1$；

第二列同理，遇到 $colsum[i]$ 和是 $2$ 或者 $1$，但是第一列该位置是 $0$ 时，填充第二列该位置数值为 $1$；

每轮填充递减 $upper$ 和 $lower$ 的值，最终如果 $upper == lower == 0$，证明可以完全填充，返回两列数组，否则返回一个空数组。

![Screenshot 2023-06-29 at 19.27.57.png](https://pic.leetcode.cn/1688038899-KCJCmB-Screenshot%202023-06-29%20at%2019.27.57.png)

![Screenshot 2023-06-29 at 19.23.58.png](https://pic.leetcode.cn/1688038907-MPrrpG-Screenshot%202023-06-29%20at%2019.23.58.png)

### 代码

* []

```Rust
impl Solution {
    pub fn reconstruct_matrix(mut upper: i32, mut lower: i32, colsum: Vec<i32>) -> Vec<Vec<i32>> {
        let mut ret = vec![vec![0; colsum.len()]; 2];
        for i in 0..colsum.len() {
            ret[0][i] = if colsum[i] == 2 || colsum[i] == 1 && lower < upper { 1 } else { 0 };
            ret[1][i] = if colsum[i] == 2 || colsum[i] == 1 && ret[0][i] == 0 { 1 } else { 0 };
            upper -= ret[0][i];
            lower -= ret[1][i];
        }
        if lower == 0 && upper == 0 { ret } else { vec![] }
    }
}
```

* []

```Java
class Solution {
    public List<List<Integer>> reconstructMatrix(int upper, int lower, int[] colsum) {
        int[][] ret = new int[2][colsum.length];
        for (int i = 0; i < colsum.length; i++) {
            ret[0][i] = colsum[i] == 2 || colsum[i] == 1 && lower < upper ? 1 : 0;
            ret[1][i] = colsum[i] == 2 || colsum[i] == 1 && ret[0][i] == 0 ? 1 : 0;
            upper -= ret[0][i];
            lower -= ret[1][i];
        }
        return lower == 0 && upper == 0 ? new ArrayList(Arrays.asList(ret[0], ret[1])) : new ArrayList<>();
    }
}
```

