### 解题思路

根据题目给出的规则，奇数只会停在当前或者往前走 + 偶数才会往后走
推出 ->
1. 最后一房间第一次访问时即全部房间被访问过
2. 第一次访问到某间房时，其余房一定访问过偶数次

dp定义：
dp[i] -> 第i间房第一次访问时的天数
dp转移：
从i-1到i，根据前置规则可知，需要i-1为偶数次访问，即dp[i] = 第二次访问i-1房天数 + 1

而第二次访问i-1房天数如何计算？
在奇数访问i-1时，要观察下一跳如何走，才能推导出第二次走回i-1的公式：
1. 当next[i-1] == i-1, 下一跳即可第二次访问i-1，-> dp[i-1] + 1
2. 当next[i-1] < i-1, 下一跳访问回到next[i-1]，此时需要额外再从next[i-1]走到i-1，这个时刻下next[i-1]和i-1都是奇数次访问状态，即第一次访问天数计算差值即可 -> dp[i-1] + 1 + (dp[i-1] - dp[next[i-1]])

故，dp转移方程
-> dp[i-1] + 2, if next[i-1] == i-1
-> 2 * dp[i-1] - dp[next[i-1]] + 2, if next[i-1] < i-1
整理可得：
-> 2 * dp[i-1] - dp[next[i-1]] + 2

比赛时主要信息都发掘到了，但DP推导愣是给自己搞晕了，睡了一觉起来才突然想明白，周赛二题的小垃圾啥时候才能进化。

### 代码

* python3

```python
class Solution:
    def firstDayBeenInAllRooms(self, nextVisit: List[int]) -> int:
        mod = 1000000007
        n = len(nextVisit)
        dp = [0 for _ in range(n)]
        dp[0] = 0
        for i in range(1, n):
            dp[i] = (2 * dp[i-1] - dp[nextVisit[i-1]] + 2) % mod
        return dp[-1]
```

