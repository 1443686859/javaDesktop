class Solution {
    public int[] resultArray(int[] nums) {
        int n = nums.length;
        int[] index = Arrays.copyOf(nums, n);
        Arrays.sort(index);
        int m = 0;
        Map<Integer, Integer> indexMap = new HashMap<>();
        indexMap.put(index[0], m + 1);
        for (int i = 1; i < n; i++) {
            if (index[m] != index[i]) {
                index[++m] = index[i];
                indexMap.put(index[i], m + 1);
            }
        }
        int[] arr1 = new int[m + 2];
        int[] arr2 = new int[m + 2];
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();
        list1.add(nums[0]);
        update(arr1, indexMap.get(nums[0]), 1);
        list2.add(nums[1]);
        update(arr2, indexMap.get(nums[1]), 1);
        for (int i = 2; i < n; i++) {
            int currentIndex = indexMap.get(nums[i]);
            int sum1 = list1.size() - sum(arr1, currentIndex);
            int sum2 = list2.size() - sum(arr2, currentIndex);
            if (sum1 > sum2) {
                list1.add(nums[i]);
                update(arr1, currentIndex,1);
            } else if (sum1 == sum2) {
                if (list1.size() <= list2.size()) {
                    list1.add(nums[i]);
                    update(arr1, currentIndex,1);
                } else {
                    list2.add(nums[i]);
                    update(arr2, currentIndex,1);
                }
            } else {
                list2.add(nums[i]);
                update(arr2, currentIndex,1);
            }
        }
        list1.addAll(list2);
        return list1.stream().mapToInt(Integer::valueOf).toArray();
    }
    public int sum(int[] arr, int index) {
        int result = 0;
        while (index > 0) {
            result += arr[index];
            index -= lowBit(index);
        }
        return result;
    }
    public int lowBit(int index) {
        return index & - index;
    }
    public void update(int[] arr, int index, int val) {
        while (index < arr.length) {
            arr[index] += val;
            index += lowBit(index);
        }
    }
}

//runtime:94 ms
//memory:70.6 MB
