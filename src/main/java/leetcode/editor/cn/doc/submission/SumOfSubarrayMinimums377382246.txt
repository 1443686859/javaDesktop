class Solution {
    public int sumSubarrayMins(int[] arr) {
        int mod = (int)1e9 + 7;
        int n = arr.length;
        int[] leftIndex = new int[n];
        int[] rightIndex = new int[n];
        Arrays.fill(leftIndex, -1);
        Arrays.fill(rightIndex, n);
        Set<int[]> set = new HashSet<>();
        Deque<Integer> deque = new ArrayDeque<>();
        for (int i = 0; i < n; i++) {

            while (!deque.isEmpty() && arr[deque.peek()] >= arr[i]) {
                deque.pop();
            }
            if (!deque.isEmpty()) {
                leftIndex[i] = deque.peek();
            }
            deque.push(i);
        }
        deque.clear();
        for (int i = n - 1; i >= 0; i--) {

            while (!deque.isEmpty() && arr[deque.peek()] > arr[i]) {
                deque.pop();
            }
            if (!deque.isEmpty()) {
                if (arr[deque.peek()] == arr[i]) {
                    set.add(new int[]{i, deque.peek()});
                }
                rightIndex[i] = deque.peek();
            }
            deque.push(i);
        }
        long result = 0;
        for (int i = 0; i < n; i++) {
            result = (result + ((long)(i - leftIndex[i]) * (rightIndex[i] - i) * arr[i]) % mod) % mod;
        }
        return (int)result;
    }
}
//runtime:27 ms
//memory:49.2 MB
