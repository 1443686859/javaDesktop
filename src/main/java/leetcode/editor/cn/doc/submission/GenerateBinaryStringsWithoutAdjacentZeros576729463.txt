class Solution {
    int max;
    List<String> result;
    public List<String> validStrings(int n) {
        max = n;
        result = new ArrayList<>();
        dfs(n, n + 1, "");
        return result;
    }
    public void dfs(int count, int pre, String temp) {
        if (count == 0) {
            result.add(temp);
            return;
        }
        if (pre - count != 2) {
            dfs(count - 1, pre,temp + "0");
        }
        dfs(count - 1, count, temp + "1");

    }

}

//runtime:3 ms
//memory:44.7 MB
