class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        int rest = 0;
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) {
                sum += nums[i];
            } else {
                rest += nums[i];
            }
        }
        int max = sum - rest;
        int min = rest - sum;
        if (target > max || target < min) {
            return 0;
        }
        int base = 0;
        if (min < 0) {
            max -= min;
            base -= min;
        }
        int[][] dp = new int[n + 1][max + 1];
        dp[0][base] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = max; j >= 0; j--) {
                dp[i][j] = (j - nums[i - 1] >= 0 ? dp[i - 1][j - nums[i - 1]] : 0) + (j + nums[i - 1] <= max ? dp[i - 1][j + nums[i - 1]] : 0);
            }
        }
        return dp[n][target + base];
    }

}

//runtime:9 ms
//memory:43.7 MB
