class Solution {
    public long findMaximumElegance(int[][] items, int k) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        long base = 0;
        PriorityQueue<int[]> priorityQueue = new PriorityQueue<>((a,b) -> b[0] - a[0]);
        for (int[] item : items) {
            priorityQueue.add(item);
        }
        int i = 0;
        PriorityQueue<int[]> queue = new PriorityQueue<>((a,b) -> a[0] - b[0]);
        for (; i < k; i++) {
            int[] array = priorityQueue.poll();
            base += array[0];
            List<Integer> current = map.getOrDefault(array[1], new ArrayList<>());
            if (!current.isEmpty()) {
                queue.add(array);
            }
            current.add(array[0]);
            map.put(array[1], current);
        }
        base += map.size() * map.size();
        long result = base;
        for (; i < items.length && !queue.isEmpty(); i++) {
            int[] array = priorityQueue.poll();
            int[] exit = queue.peek();
            long s = array[0] - exit[0] + 2 * map.size() + 1;
            if (!map.containsKey(array[1]) && s > 0) {
                base += s;
                queue.poll();
                List<Integer> current = map.getOrDefault(array[1], new ArrayList<>());
                current.add(array[0]);
                map.put(array[1], current);
                result = Math.max(result, base);
            }
        }
        return result;
    }
}

//total_testcases:2728
//total_correct:2726
//input_formatted:[[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[3,2],[3,3],[3,4],[3,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11]]
10
//expected_output:137
//code_output:101
//last_testcase:[[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[3,2],[3,3],[3,4],[3,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11]]
10
