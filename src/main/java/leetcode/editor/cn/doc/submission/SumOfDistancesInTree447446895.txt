class Solution {
    int[][] count;
    int[] parentA;
    public int[] sumOfDistancesInTree(int n, int[][] edges) {
        int[] result = new int[n];
        List<Integer>[] map = new List[n];
        for (int i = 0; i < n; i++) {
            map[i] = new ArrayList<>();
        }
        for (int[] edge : edges) {
            map[edge[0]].add(edge[1]);
            map[edge[1]].add(edge[0]);
        }
        count = new int[n][2];
        parentA = new int[n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(count[i], - 1);
        }
        getCount(map, -1, 0);
        result[0] = count[0][0];
        for (int i = 1; i < n; i++) {
            result[i] = result[parentA[i]] + (n - 2 * count[i][1]);
        }
        return result;
    }
    public int[] getCount(List<Integer>[] map, int parent, int current) {
        if (count[current][0] != -1) {
            return count[current];
        }
        int[] currentResult = new int[2];
        currentResult[1] = 1;
        parentA[current] = parent;
        for (int i = 0; i < map[current].size(); i++) {
            if (parent != map[current].get(i)) {
                int[] currentArray = getCount(map, current, map[current].get(i));
                currentResult[0] += currentArray[0] + currentArray[1];
                currentResult[1] += currentArray[1];
            }
        }
        count[current] = currentResult;
        return currentResult;
    }


}

//total_testcases:74
//total_correct:14
//input_formatted:3
[[2,1],[0,2]]
//expected_output:[3,3,2]
//code_output:[3,1,2]
//last_testcase:3
[[2,1],[0,2]]
