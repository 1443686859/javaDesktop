    class Solution {
        public long minimumRemoval(int[] beans) {
            Arrays.sort(beans);
            long[] sum = new long[beans.length + 1];
            Map<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < beans.length; i++) {
                sum[i + 1] = sum[i] + beans[i];
                if (!map.containsKey(beans[i])) {
                    map.put(beans[i], i);
                }
            }
            int n = beans.length;
            long min = sum[n];
            for (int i = 0; i < n; i++) {
                int index = map.get(beans[i]);
                long cost = sum[index];
                cost += (sum[n] - sum[i]) - 1l * (n - i) * beans[i];
                min = Math.min(min, cost);
            }
            return min;
        }

    }

//runtime:74 ms
//memory:58.9 MB
