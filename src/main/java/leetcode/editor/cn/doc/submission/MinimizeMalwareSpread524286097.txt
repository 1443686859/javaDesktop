class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        int m = initial.length;
        int max = Integer.MIN_VALUE;
        int result = -1;
        for (int i = 0; i < m; i++) {
            boolean[] visited = new boolean[n];
            Deque<Integer> deque = new ArrayDeque<>();
            for (int j = 0; j < m; j++) {
                if (j != i) {
                    deque.add(initial[j]);
                }
            }
            int count = 0;
            while (!deque. isEmpty()) {
                int size = deque.size();
                for (int j = 0; j < size; j++) {
                    int current = deque.pollFirst();
                    if (visited[current]) {
                        continue;
                    }
                    visited[current] = true;
                    count++;
                    for (int z = 0; z < m; z++) {
                        if (graph[current][z] == 1 && !visited[z]) {
                            deque.addLast(z);
                        }
                    }
                }
            }
            if (max < count) {
                max = count;
                result = i;
            }
        }
        return initial[result];
    }
}

//total_testcases:68
//total_correct:37
//input_formatted:[[1,1,0],[1,1,0],[0,0,1]]
[0,1,2]
//expected_output:2
//code_output:0
//last_testcase:[[1,1,0],[1,1,0],[0,0,1]]
[0,1,2]
