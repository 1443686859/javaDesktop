class Solution {
    int mod = (int)1e9 + 7;
    public int numFactoredBinaryTrees(int[] arr) {
        Map<Integer, Integer> resultMap = new HashMap<>();
        Arrays.sort(arr);
        for (int i = 0; i < arr.length; i++) {
            resultMap.put(arr[i], 1);
        }
        long ans = 0;
        for (int i = 0; i < arr.length; i++) {
            long current = resultMap.get(arr[i]);
            for (int j = i - 1; j >= 0; j--) {
                if (arr[i] % arr[j] == 0) {
                    if (arr[i] / arr[j] > arr[j]) {
                        break;
                    }
                    int v = resultMap.get(arr[j]);
                    int v1 = resultMap.getOrDefault(arr[i] / arr[j], 0);
                    long currentVal = 0;
                    if (arr[i] / arr[j]== arr[j]) {
                        currentVal = ((1l * v1 * v) % mod);
                    } else {
                        currentVal = (2l * v1 * v) % mod;
                    }
                   current = (current + currentVal) % mod;
                    resultMap.put(arr[i], (int)current);
                }
            }
            ans = (ans + resultMap.get(arr[i])) % mod;
        }
        return (int) ans;
    }
}

//runtime:19 ms
//memory:41.9 MB
