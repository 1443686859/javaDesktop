class Solution {
    public int countServers(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[] d = new int[n * m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                d[i * m + j] = i * m + j;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    for (int z = i - 1; z >= 0; z--) {
                        if (grid[z][j] == 1)
                        merge(d, i * m + j,  z * m +j);
                    }
                    for (int z = j - 1; z >= 0; z--) {
                        if (grid[i][z] == 1)
                        merge(d, i * m + j,  i * m + z);
                    }
                }
            }
        }
        int result = 0;
        int[] count = new int[n * m];
        for (int i = 0; i < n * m; i++) {
            int target = findP(d, i);
            count[target]++;
        }

        for (int i : count) {
            if (i > 1){
                result += i;
            }
        }
        return result;
    }
    public void merge(int[] d, int index, int current) {
        int p1 = findP(d, index);
        int p2 = findP(d, current);
        if (p1 != p2) {
            d[p1] = d[p2];
        }
    }
    public int findP(int[] d, int index) {
        if (index == d[index]) {
            return index;
        } else {
            d[index] = findP(d, d[index]);
        }
        return d[index];
    }
}

//runtime:12 ms
//memory:48.6 MB
