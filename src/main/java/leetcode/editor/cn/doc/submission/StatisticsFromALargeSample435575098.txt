class Solution {
    public double[] sampleStats(int[] count) {
        int sum = 0;
        int sumCount = 0;
        int maxIndex = -1;
        double[] result = new double[5];
        for (int i = 0; i < count.length; i++) {
            sumCount += count[i];
            sum += count[i] * i;
            if (result[0] == 0 && count[i] != 0) {
                result[0] = i;
            }
            if (result[1] == 0 && count[count.length - 1 - i] != 0) {
                result[1] = count.length - 1 - i;
            }
            if (maxIndex == -1) {
                maxIndex = i;
            } else if (count[i] > count[maxIndex]) {
                maxIndex = i;
            }
        }
        result[4] = maxIndex;
        result[2] = 1d * sum / sumCount;
        int targetIndex1 = (sumCount - 1) / 2 + 1;
        int targetIndex2 = sumCount / 2 + 1;
        for (int i = 0; i < count.length; i++) {
            if (targetIndex1 <= 0 ) {
                break;
            }
            if (count[i] != 0) {
                targetIndex1 -= count[i];
                if (targetIndex1 <= 0) {
                    result[3] += i;
                }
            }
        }
        for (int i = 0; i < count.length; i++) {
            if (targetIndex2 <= 0 ) {
                break;
            }
            if (count[i] != 0) {
                targetIndex2 -= count[i];
                if (targetIndex2 <= 0) {
                    result[3] += i;
                }
            }
        }
        result[3] = result[3] * 1d / 2;
        return result;

    }
}

//total_testcases:52
//total_correct:38
//input_formatted:[264,912,1416,1903,2515,3080,3598,4099,4757,5270,5748,6451,7074,7367,7847,8653,9318,9601,10481,10787,11563,11869,12278,12939,13737,13909,14621,15264,15833,16562,17135,17491,17982,18731,19127,19579,20524,20941,21347,21800,22342,21567,21063,20683,20204,19818,19351,18971,18496,17974,17677,17034,16701,16223,15671,15167,14718,14552,14061,13448,13199,12539,12265,11912,10931,10947,10516,10177,9582,9102,8699,8091,7864,7330,6915,6492,6013,5513,5140,4701,4111,3725,3321,2947,2357,1988,1535,1124,664,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
//expected_output:[0.00000,89.00000,42.82683,42.00000,40.00000]
//code_output:[1.00000,89.00000,42.82683,42.00000,40.00000]
//last_testcase:[264,912,1416,1903,2515,3080,3598,4099,4757,5270,5748,6451,7074,7367,7847,8653,9318,9601,10481,10787,11563,11869,12278,12939,13737,13909,14621,15264,15833,16562,17135,17491,17982,18731,19127,19579,20524,20941,21347,21800,22342,21567,21063,20683,20204,19818,19351,18971,18496,17974,17677,17034,16701,16223,15671,15167,14718,14552,14061,13448,13199,12539,12265,11912,10931,10947,10516,10177,9582,9102,8699,8091,7864,7330,6915,6492,6013,5513,5140,4701,4111,3725,3321,2947,2357,1988,1535,1124,664,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
