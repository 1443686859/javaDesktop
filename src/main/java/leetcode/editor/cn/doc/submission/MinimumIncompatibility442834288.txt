class Solution {
        int[][] memo;
        int maxLength;

    public int minimumIncompatibility(int[] nums, int k) {
        int i = (1 << nums.length) - 1;
        maxLength = nums.length / k;
        memo = new int[k + 1][i + 1];
        for (int j = 0 ;j <= k; j++) {
            Arrays.fill(memo[j], Integer.MAX_VALUE);
        }
        if (nums.length == k) {
            return 0;
        }
        return dfs(i, k, nums);
    }
    int dfs(int current, int index, int[] arr) {
        int n = arr.length;
        if (memo[index][current] != Integer.MAX_VALUE) {
            return memo[index][current];
        }
        if (index == 0) {
            if (current != 0) {
                return -1;
            }
            return 0;
        }
        if (current == 0 && index != 0) {
            return -1;
        }
        int[] count = new int[n + 1];
        int max = 0;
        for (int i = 0; i < n; i++) {
            if ((current & (1 << i)) != 0) {
                count[arr[n - 1 - i]]++;
                max = Math.max(max, count[arr[n - 1 - i]]);
            }
        }
        if (max > index) {
            return -1;
        }
        int result = Integer.MAX_VALUE;
        for (int i = current; i > 0; i = current & (i - 1)) {
            if (check(i, arr)) {
                int nowResult = dfs(current & (~i), index - 1, arr);
                if (nowResult != -1) {
                    result = Math.min(result, get(i, arr) + nowResult);
                }
            }
        }
        result = result == Integer.MAX_VALUE ? - 1 : result;
        memo[index][current] = result;
        return result;
    }
    int get(int current, int[] arr) {
        int max = -1;
        int n = arr.length;
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < arr.length; i++) {
            if ((current & (1 << i)) != 0) {
                max = Math.max(max, arr[n - 1 - i]);
                min = Math.min(min, arr[n - i - 1]);
            }
        }
        return max - min;
    }
    boolean check(int current, int[] arr) {
        int[] count = new int[arr.length + 1];
        int n = arr.length;
        int length = 0;
        for (int i = 0; i < arr.length; i++) {
            if ((current & (1 << i)) != 0) {
                count[arr[n - 1- i]]++;
                length++;
                if (count[arr[n - 1- i]] >= 2) {
                    return false;
                }
            }
        }
        return length == maxLength;
    }
}

//runtime:N/A
//memory:N/A
//total_testcases:58
//total_correct:52
//input_formatted:[11,11,3,4,2,16,14,13,6,14,2,5,10,13,5,7]
8
//expected_output:12
//code_output:
//runtime_error:
//last_testcase:[11,11,3,4,2,16,14,13,6,14,2,5,10,13,5,7] 8
