class Solution {
    public int findIntegers(int n) {
        int size =64 - Long.numberOfLeadingZeros(n);
        int[] s = new int[size];
        for (int i = 0; i < size; i++) {
            s[size - 1 - i] = (n >> i) & 1;
        }
        return dfs(s, 0, false, false);
    }
    public int dfs(int[] s, int index, boolean max, boolean isPreOne) {
        if (index == s.length) {
            return 1;
        }
        int result = 0;
        if (max) {
            if (s[index] == 1) {
                if (!isPreOne) {
                    result += dfs(s, index + 1, true, true);
                }
                result += dfs(s, index + 1, false, false);
            } else {
                result += dfs(s, index + 1, true, false);
            }
        } else {

                if (!isPreOne) {
                    result += dfs(s, index + 1, index == 0, true);
                }
                result += dfs(s, index + 1, false, false);

        }
        return result;
    }
}

//runtime:N/A
//memory:N/A
//total_testcases:527
//total_correct:451
//input_formatted:999999975
//expected_output:2178309
//code_output:
//runtime_error:
//last_testcase:999999975
