class Solution {

    public int mctFromLeafValues(int[] arr) {
        return dfs(arr, 0, arr.length - 1)[0];
    }

    public int[] dfs(int[] arr, int left, int right) {
        if (left == right) {
            return new int[]{0, arr[right]};
        }
        int i = right;
        int[] result = new int[2];
        result[0] = Integer.MAX_VALUE;
        for ( ; i > left; i--) {
            int[] leftResult = dfs(arr, left, i - 1);
            int[] rightResult = dfs(arr, i, right);
            result[0] = Math.min(result[0], leftResult[0] + rightResult[0] + (leftResult[1] * rightResult[1]));
            result[1] = Math.max(result[1], Math.max(leftResult[1], rightResult[1]));
        }
        return result;
    }
}

//runtime:N/A
//memory:N/A
//total_testcases:103
//total_correct:59
//input_formatted:[5,1,2,3,15,7,3,2,2,5,9,1,11,9,15,14,7,1,5]
//expected_output:1166
//code_output:
//runtime_error:
//last_testcase:[5,1,2,3,15,7,3,2,2,5,9,1,11,9,15,14,7,1,5]
