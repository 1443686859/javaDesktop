class LockingTree {
int[] p;
int[] lock;
List<Integer>[] map;
int n;
    public LockingTree(int[] parent) {
        n = parent.length;
        p = parent;
        lock = new int[n];
        map = new List[n];
        Arrays.setAll(map, e -> new ArrayList<>());
        for (int i = 0; i < n; i++) {
            if (p[i] != -1) {
                map[p[i]].add(i);
            }
        }
    }
    
    public boolean lock(int num, int user) {
        if (num < n && lock[num] == 0) {
            lock[num] = user;
            return true;
        }
            return false;

    }
    
    public boolean unlock(int num, int user) {
        if (num < n && lock[num] == user) {
            lock[num] = 0;
            return true;
        }
        return false;
    }
    
    public boolean upgrade(int num, int user) {
        if (lock[num] != 0) {
            return false;
        }
        boolean parent = false;
        while (p[num] != -1) {
            if (lock[num] != 0) {
                parent = true;
                break;
            }
            num = p[num];
        }
        if (parent) {
            return false;
        }
        Deque<Integer> deque = new ArrayDeque<>();
        deque.add(num);
        int count = 0;
        while (!deque.isEmpty()) {
            int current = deque.poll();
            if (lock[current] != 0) {
                lock[current] = 0;
                count++;
            }
            for (int i : map[current]) {
                deque.addLast(i);
            }
        }
        if (count == 0) {
            return false;
        }
        lock[num] = user;
        return true;
    }

}

/**
 * Your LockingTree object will be instantiated and called as such:
 * LockingTree obj = new LockingTree(parent);
 * boolean param_1 = obj.lock(num,user);
 * boolean param_2 = obj.unlock(num,user);
 * boolean param_3 = obj.upgrade(num,user);
 */

//total_testcases:151
//total_correct:5
//input_formatted:["LockingTree","upgrade","upgrade","unlock","lock","upgrade"]
[[[-1,0,3,1,0]],[4,5],[3,8],[0,7],[2,7],[4,6]]
//expected_output:[null,false,false,false,true,false]
//code_output:[null,false,false,false,true,true]
//last_testcase:["LockingTree","upgrade","upgrade","unlock","lock","upgrade"]
[[[-1,0,3,1,0]],[4,5],[3,8],[0,7],[2,7],[4,6]]
