class Solution {
    public int maximumTastiness(int[] price, int k) {
        Arrays.sort(price);
       int left = 0, right = (price[price.length - 1] - price[0]) / (k - 1) + 1;
        while (left + 1 < right) { // 开区间不为空
            // 循环不变量：
            // f(left) >= k
            // f(right) < k
            int mid = left + (right - left) / 2;
            if (check(price, mid, k)) left = mid; // 下一轮二分 (mid, right)
            else right = mid; // 下一轮二分 (left, mid)
        }
        return left;

    }
    public boolean check(int[] arr, int mid, int k) {
        int start = arr[0];
        int count = 1;
        for (int i = 1; i < arr.length; i++) {
            if (start + mid <= arr[i]) {
                start = arr[i];
                count++;
            }
        }
        return count >= k;
    }
}
//runtime:37 ms
//memory:53 MB
