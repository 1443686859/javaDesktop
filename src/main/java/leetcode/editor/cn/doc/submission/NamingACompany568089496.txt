class Solution {
    public long distinctNames1(String[] ideas) {
        Set<String>[] array = new Set[26];
        Arrays.setAll(array, e -> new HashSet<>());
        for (String idea : ideas) {
            array[idea.charAt(0) - 'a'].add(idea.substring(1));
        }
        long result = 0;
        for (int i = 1; i < 26; i++) {
            for (int j = 0; j < i; j++)  {
                int m = 0;
                for (String s : array[i]) {
                    if (array[j].contains(s)) {
                        m++;
                    }
                }
                result += (long) (array[i].size() - m) * (array[j].size() - m);
            }
        }
        return result * 2;
    }
    public long distinctNames(String[] ideas) {
        int[] count = new int[26];
        int[][] intersection = new int[26][26];
        Map<String, Integer> map = new HashMap<>();
        for (String idea : ideas) {
            int index = idea.charAt(0) - 'a';
            count[index]++;
            String suffix = idea.substring(1);
            int mask = map.getOrDefault(suffix, 0);
            map.put(suffix, mask | 1 << index);
            for (int i = 0; i < 26; i++) {
                if ((mask & (1 << i)) != 0) {
                    intersection[i][index]++;
                    intersection[index][i]++;
                }
            }
        }
        long result = 0;
        for (int i = 1; i < 26; i++) {
            for (int j = 0; j < i; j++) {
                result += (long) (count[i] - intersection[i][j]) * (count[j] - intersection[j][i]);
            }
        }
        return result * 2;
    }
    TrieNode root;
    class TrieNode {
        TrieNode[] children = new TrieNode[26];
        boolean isEnd;
    }
    public void insert(String word) {
        TrieNode node = root;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (node.children[c - 'a'] == null) {
                node.children[c - 'a'] = new TrieNode();
            }
            node = node.children[c - 'a'];
        }
        node.isEnd = true;
    }
    public boolean search(String word) {
        TrieNode node = root;
        for (int i = 0; i < word.length(); i++) {
            int index = word.charAt(i) - 'a';
            if (node.children[index] == null) {
                return false;
            }
            node = node.children[index];
        }
        return node.isEnd;
    }
//    public Long sum(String word) {
//
//    }
}

//runtime:38 ms
//memory:58.3 MB
