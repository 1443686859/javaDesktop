class Solution {
        boolean[][] array;
    public int[] getCoprimes(int[] nums, int[][] edges) {
        int n = nums.length;
        generate();
        List<Integer>[] grap = new List[n];
        Arrays.setAll(grap, e -> new ArrayList<>());
        for (int[] edge : edges) {
            grap[edge[0]].add(edge[1]);
            grap[edge[1]].add(edge[0]);
        }
        int[] index = new int[51];
        Arrays.fill(index, -1);
        int[] result = new int[n];
        Arrays.fill(result, -1);
        int[] temp = new int[51];
        Arrays.fill(temp, -1);
        temp[nums[0]] = 0;
        index[nums[0]] = 0;
        dfs(grap, nums, -1, 0,  index, 0, result, new int[51]);
        return result;
    }
    public void dfs(List<Integer>[] grap, int[] nums, int parent, int current, int[] index, int currentIndex, int[] result, int[] temp) {
        for (int i = 1; i < 51; i++) {
            if (array[nums[current]][i] && index[i] != -1 && (result[current] == - 1 || index[i] > index[result[i]])) {
                result[current] = temp[i];
            }
        }
        for (int i : grap[current]) {
            if (parent != i) {
                int oldIndex = index[nums[i]];
                int oldTemp = temp[nums[i]];
                index[nums[i]] = currentIndex;
                temp[nums[i]] = i;
                dfs(grap, nums, current, i, index, currentIndex + 1, result, temp);
                index[nums[i]] = oldIndex;
                temp[nums[i]] = oldTemp;
            }
        }
    }

    public void generate() {
        array = new boolean[51][51];
        Arrays.fill(array[1], true);
        for (int i = 2; i <= 50; i++) {
            array[i][1] = true;
            for (int j = 2; j <= 50; j++) {
                array[i][j] = gcd(i, j) == 1;
            }
        }
    }
    public int gcd(int a, int b) {
        return a % b == 0 ? b : gcd(b, a % b);
    }
}

//total_testcases:37
//total_correct:2
//input_formatted:[1]
[]
//expected_output:[-1]
//code_output:[0]
//last_testcase:[1]
[]
