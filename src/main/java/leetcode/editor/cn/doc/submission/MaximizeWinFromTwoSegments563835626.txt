class Solution {
    public int maximizeWin(int[] prizePositions, int k) {
        int start = 1;
        int[] count = new int[prizePositions.length];
        count[0] = 1;
        for (int i = 1; i < prizePositions.length; i++) {
            if (prizePositions[start - 1] != prizePositions[i]) {
                prizePositions[start] = prizePositions[i];
                count[start++]++;
            } else {
                count[start - 1]++;
            }
        }
        int left = 0;
        int right = 0;
        int temp = 0;
        List<int[]> list = new ArrayList<>();
        while (right < start) {
            int current = prizePositions[right];
            while (current - prizePositions[left] > k) {
                temp -= count[left++];
            }
            temp += count[right];
            if (prizePositions[right] - prizePositions[left] == k) {
                list.add(new int[]{left, right, temp});
            }
            right++;
        }
        int max = 0;
        for (int i = 0; i < list.size() - 1; i++) {
            for (int j = i + 1; j < list.size(); j++) {
                int[] pre = list.get(i);
                int[] after = list.get(j);
                int result = pre[2] + after[2];
                left = Math.max(pre[0], after[0]);
                right = Math.min(pre[1], after[1]);
                while (left <= right) {
                    result -= count[left++];
                }
                max = Math.max(max, result);
            }
        }
        return max;
    }
}

//total_testcases:72
//total_correct:8
//input_formatted:[2616,2618,2620,2621,2626,2635,2657,2662,2662,2669,2671,2693,2702,2713,2714,2718,2730,2731,2750,2756,2772,2773,2775,2785,2795,2805,2811,2813,2816,2823,2824,2824,2826,2830,2833,2857,2885,2898,2910,2919,2928,2941,2942,2944,2965,2967,2970,2973,2974,2975,2977,3002,3007,3012,3042,3049,3078,3084,3089,3090,3094,3097,3114,3124,3125,3125,3144,3147,3148,3174,3197,3255,3262,3288,3291,3316,3320,3322,3331,3342,3378,3412,3412,3416,3420,3427,3428,3446,3452,3472,3479,3483,3488,3500,3516,3522,3531,3532,3540,3540,3544,3557,3570,3580,3592,3597,3597,3601,3615,3631,3640,3645,3673,3677,3681,3683,3685,3718,3738,3746,3758,3769,3797,3802,3815,3832,3839,3851,3864,3888,3889,3901,3902,3910,3913,3933,3940,3961,3974,3988,4003,4013,4019,4023,4026,4047,4060,4065,4072,4073,4082,4084,4109,4132,4139,4143,4145,4146,4155]
6641
//expected_output:159
//code_output:0
//last_testcase:[2616,2618,2620,2621,2626,2635,2657,2662,2662,2669,2671,2693,2702,2713,2714,2718,2730,2731,2750,2756,2772,2773,2775,2785,2795,2805,2811,2813,2816,2823,2824,2824,2826,2830,2833,2857,2885,2898,2910,2919,2928,2941,2942,2944,2965,2967,2970,2973,2974,2975,2977,3002,3007,3012,3042,3049,3078,3084,3089,3090,3094,3097,3114,3124,3125,3125,3144,3147,3148,3174,3197,3255,3262,3288,3291,3316,3320,3322,3331,3342,3378,3412,3412,3416,3420,3427,3428,3446,3452,3472,3479,3483,3488,3500,3516,3522,3531,3532,3540,3540,3544,3557,3570,3580,3592,3597,3597,3601,3615,3631,3640,3645,3673,3677,3681,3683,3685,3718,3738,3746,3758,3769,3797,3802,3815,3832,3839,3851,3864,3888,3889,3901,3902,3910,3913,3933,3940,3961,3974,3988,4003,4013,4019,4023,4026,4047,4060,4065,4072,4073,4082,4084,4109,4132,4139,4143,4145,4146,4155]
6641
