class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int[][][] result = new int[n][k + 1][2];
        int MIN = -(int)(1e6);

        for (int i = 1; i <= k; i++) {
            Arrays.fill(result[0][i], MIN);
        }
        result[0][0][1] = - prices[0];
        for (int i = 1; i < n; i++) {
            result[i][0][1] = -prices[i];
            for (int j = 1; j <= k; j++) {
                Arrays.fill(result[i][j], MIN);
                result[i][j][0] = Math.max(result[i - 1][j][0], result[i - 1][j - 1][1] + prices[i]);
                result[i][j][1] = Math.max(Math.max(result[i - 1][j][1], result[i][j][1]),Math.max( result[i - 1][j][0], result[i][j][0]) - prices[i]);
            }
        }
        int ans = 0;
        for (int i = 1; i <= k; i++) {
            ans = Math.max(ans, result[n - 1][i][0]);
        }
        return ans;

    }
}

//total_testcases:210
//total_correct:180
//input_formatted:2
[2,1,4,5,2,9,7]
//expected_output:11
//code_output:10
//last_testcase:2
[2,1,4,5,2,9,7]
