    class Solution {
        public long minimumRemoval(int[] beans) {
            Arrays.sort(beans);
            long[] sum = new long[beans.length + 1];
            int max = 0;
            for (int i = 0; i < beans.length; i++) {
                sum[i + 1] = sum[i] + beans[i];
                max = Math.max(max, beans[i]);
            }
            int[] indexA = new int[max + 1];
            Arrays.fill(indexA, - 1);
            for (int i = 0; i < beans.length; i++) {
                if (indexA[beans[i]] == -1) {
                    indexA[beans[i]] = i;
                }
            }
            int n = beans.length;
            long min = sum[n];
            for (int i = 0; i < n; i++) {
                int index = indexA[beans[i]];
                long cost = sum[index];
                cost += (sum[n] - sum[i]) - 1l * (n - i) * beans[i];
                min = Math.min(min, cost);
            }
            return min;
        }

    }

//runtime:47 ms
//memory:56.3 MB
