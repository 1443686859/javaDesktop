class Solution {
    public long repairCars1(int[] ranks, int cars) {
        PriorityQueue<long[]>  queue = new PriorityQueue<>((a, b) -> {
           long i1 = (a[1] + 1) * (a[1] + 1) * a[0];
           long i2 = (b[1] + 1) * (b[1] + 1) * b[0];
            if (i1 < i2) {
                return -1;
            } else if (i1 > i2) {
                return 1;
            } else {
                return 0;
            }
        });
        for (int i = 0; i < ranks.length; i++) {
            queue.add(new long[]{ranks[i], 0l});
        }
        long ans = 0;
        while (cars > 0) {
            long[] c = queue.poll();
            c[1]++;
            queue.add(c);
            ans = Math.max(ans, c[0] * c[1] * c[1]);
            cars--;
        }
        return ans;
    }
    public long repairCars(int[] ranks, int cars) {
        Arrays.sort(ranks);
        int left = 0;
        int right = cars;
        while (left <= right) {
            int mid = (left + right) / 2;
            long target = 1l * ranks[0] * mid * mid;
            if (check(ranks, target, cars - mid)) {
                right --;
            } else {
                left++;
            }
        }
        return ranks[0] * (right + 1) * (right + 1);
    }
    public boolean check(int[] ranks, long target, int sum) {
        int count = 0;
        for (int i = 1; i < ranks.length; i++) {
            count += (int) Math.sqrt(target / ranks[i]);
        }
        return count >= sum;
    }
}

//total_testcases:1072
//total_correct:19
//input_formatted:[3,3,1,2,1,1,3,2,1]
58
//expected_output:75
//code_output:81
//last_testcase:[3,3,1,2,1,1,3,2,1]
58
