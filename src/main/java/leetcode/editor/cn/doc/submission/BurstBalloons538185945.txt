class Solution {
        Map<String, Integer> memo;
    public int maxCoins(int[] nums) {
        List<Integer> list = new ArrayList<>();
        memo = new HashMap<>();
        for (int i : nums) {
            list.add(i);
        }
        return getMas(list);
    }
    public int getMas(List<Integer> list) {

        if (list.size() == 1) {
            return list.get(0);
        }
        List<Integer> temp = new ArrayList<>();
        String index = list.stream().map(e -> ""+e).collect(Collectors.joining(","));
        if (memo.containsKey(index)) {
            return memo.get(index);
        }
        int result = 0;
        for (int i = 0; i < list.size(); i++) {

            if (i == 0) {
                result = Math.max(result, list.get(0) * list.get(1) + getMas(list.subList(1, list.size())));
            } else if (i == list.size() - 1) {
                result = Math.max(result, list.get(list.size() - 2) * list.get(list.size() - 1) +
                        getMas(list.subList(0, list.size() - 1)));
            } else {
                List<Integer> current = new ArrayList<>(temp);
                current.addAll(list.subList(i + 1, list.size()));
                result = Math.max(result, list.get(i - 1) * list.get(i) * list.get(i + 1) +
                        getMas(current)) ;
            }
            temp.add(list.get(i));
        }
        memo.put(index, result);
        return result;
    }
}

//runtime:N/A
//memory:N/A
//total_testcases:73
//total_correct:31
//input_formatted:[8,2,6,8,9,8,1,4,1,5,3,0,7,7,0,4,2,2,5]
//expected_output:3630
//code_output:
//runtime_error:
//last_testcase:[8,2,6,8,9,8,1,4,1,5,3,0,7,7,0,4,2,2,5]
