   class CountIntervals {
        List<int[]> list;
        int count;

    public CountIntervals() {
        count = 0;
        list = new ArrayList<>();
    }
    
    public void add(int left, int right) {
        int pre = 0;
        int after = list.size() - 1;
        while (pre <= after) {
            int mid = (pre + after) / 2;
            if (list.get(mid)[1] < left) {
                pre = mid + 1;
            } else {
                after = mid - 1;
            }
        }
        int index = after + 1;
        if (index == list.size()) {
            list.add(new int[]{left, right});
            count += right - left + 1;
            return ;
        } else if (index == 0 && list.get(0)[0] > right) {
            List<int[]> result = new ArrayList<>();
            result.add(new int[]{left, right});
            result.addAll(list);
            count += right - left + 1;
            list = result;
            return;
        }
        count -= list.get(index)[1] - list.get(index)[0] + 1;
        list.get(index)[0] = Math.min(list.get(index)[0], left);
        list.get(index)[1] = Math.max(list.get(index)[1], right);
        count += list.get(index)[1] - list.get(index)[0] + 1;
        while (index + 1 < list.size() && list.get(index)[1] >= list.get(index + 1)[0]) {
            int[] next = list.get(index + 1);
            count -= list.get(index)[1] - list.get(index)[0] + 1;
            count -= list.get(index + 1)[1] - list.get(index + 1)[0] + 1;
            list.get(index)[0] = Math.min(list.get(index)[0], next[0]);
            list.get(index)[1] = Math.max(list.get(index)[1], next[1]);
            count += list.get(index)[1] - list.get(index)[0] + 1;
            list.remove(index + 1);
        }
        while (index - 1 >= 0 && list.get(index)[0] <= list.get(index - 1)[1]) {
            int[] next = list.get(index + 1);
            count -= list.get(index)[1] - list.get(index)[0] + 1;
            count -= list.get(index - 1)[1] - list.get(index - 1)[0] + 1;
            list.get(index)[0] = Math.min(list.get(index)[0], next[0]);
            list.get(index)[1] = Math.max(list.get(index)[1], next[1]);
            count += list.get(index)[1] - list.get(index)[0] + 1;
            list.remove(index - 1);
            index--;
        }
    }
    
    public int count() {
        return count;
    }
}

/**
 * Your CountIntervals object will be instantiated and called as such:
 * CountIntervals obj = new CountIntervals();
 * obj.add(left,right);
 * int param_2 = obj.count();
 */

//total_testcases:73
//total_correct:65
//input_formatted:["CountIntervals","count","add","add","count","add","count","count","add","count","count","add","add","count","add","add","add","count","add","count","count","add","count","add","count","add","add","add","count","add","add","add","count","add","add","add","count","count","count","count","count","count","add","add","add","count","count","add","count","count","add","add","count","count","count","add","count","count","add","add","add","count","count","add","count","count","add","add","count","count","add","add","count","count","add","add","add","add","add","add","add","add","count","count","add","count","count","add","add","add","add","count","count","add","count","count","count","count","add","count","count","add","count","add","count","add","count","add","count","add","add","add","add","add","add","count","count","count","add"]
[[],[],[457,717],[918,927],[],[660,675],[],[],[885,905],[],[],[323,416],[774,808],[],[671,787],[133,963],[374,823],[],[494,556],[],[],[564,898],[],[514,530],[],[702,950],[282,695],[324,943],[],[893,975],[337,869],[674,981],[],[847,966],[12,544],[706,862],[],[],[],[],[],[],[633,964],[17,86],[209,315],[],[],[974,995],[],[],[106,817],[873,886],[],[],[],[255,422],[],[],[71,927],[852,889],[980,994],[],[],[477,649],[],[],[76,426],[508,510],[],[],[345,611],[816,980],[],[],[848,924],[855,914],[621,740],[176,801],[258,451],[229,540],[119,482],[801,917],[],[],[308,877],[],[],[927,961],[546,881],[563,867],[64,284],[],[],[289,540],[],[],[],[],[851,898],[],[],[330,400],[],[724,826],[],[316,578],[],[95,973],[],[469,971],[568,806],[775,953],[556,958],[109,488],[142,305],[],[],[],[686,778]]
//expected_output:[null,0,null,null,271,null,271,271,null,292,292,null,null,421,null,null,null,831,null,831,831,null,831,null,831,null,null,null,831,null,null,null,849,null,null,null,970,970,970,970,970,970,null,null,null,970,970,null,984,984,null,null,984,984,984,null,984,984,null,null,null,984,984,null,984,984,null,null,984,984,null,null,984,984,null,null,null,null,null,null,null,null,984,984,null,984,984,null,null,null,null,984,984,null,984,984,984,984,null,984,984,null,984,null,984,null,984,null,984,null,null,null,null,null,null,984,984,984,null]
//code_output:[null,0,null,null,271,null,271,271,null,304,304,null,null,509,null,null,null,831,null,831,831,null,831,null,831,null,null,null,831,null,null,null,849,null,null,null,970,970,970,970,970,970,null,null,null,970,970,null,984,984,null,null,984,984,984,null,984,984,null,null,null,984,984,null,984,984,null,null,984,984,null,null,984,984,null,null,null,null,null,null,null,null,984,984,null,984,984,null,null,null,null,984,984,null,984,984,984,984,null,984,984,null,984,null,984,null,984,null,984,null,null,null,null,null,null,984,984,984,null]
//last_testcase:["CountIntervals","count","add","add","count","add","count","count","add","count","count","add","add","count","add","add","add","count","add","count","count","add","count","add","count","add","add","add","count","add","add","add","count","add","add","add","count","count","count","count","count","count","add","add","add","count","count","add","count","count","add","add","count","count","count","add","count","count","add","add","add","count","count","add","count","count","add","add","count","count","add","add","count","count","add","add","add","add","add","add","add","add","count","count","add","count","count","add","add","add","add","count","count","add","count","count","count","count","add","count","count","add","count","add","count","add","count","add","count","add","add","add","add","add","add","count","count","count","add"]
[[],[],[457,717],[918,927],[],[660,675],[],[],[885,905],[],[],[323,416],[774,808],[],[671,787],[133,963],[374,823],[],[494,556],[],[],[564,898],[],[514,530],[],[702,950],[282,695],[324,943],[],[893,975],[337,869],[674,981],[],[847,966],[12,544],[706,862],[],[],[],[],[],[],[633,964],[17,86],[209,315],[],[],[974,995],[],[],[106,817],[873,886],[],[],[],[255,422],[],[],[71,927],[852,889],[980,994],[],[],[477,649],[],[],[76,426],[508,510],[],[],[345,611],[816,980],[],[],[848,924],[855,914],[621,740],[176,801],[258,451],[229,540],[119,482],[801,917],[],[],[308,877],[],[],[927,961],[546,881],[563,867],[64,284],[],[],[289,540],[],[],[],[],[851,898],[],[],[330,400],[],[724,826],[],[316,578],[],[95,973],[],[469,971],[568,806],[775,953],[556,958],[109,488],[142,305],[],[],[],[686,778]]
