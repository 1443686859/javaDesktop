class Solution {
        int[] a;
        int[] n;
        Map<Long, Integer> memo;
    public int minimumValueSum(int[] nums, int[] andValues) {
        memo = new HashMap<>();
        a = andValues;
        n = nums;
        int result = dfs(0, 0, - 1);
        return  result == Integer.MAX_VALUE / 2 ?  -1 : result;
    }
    public int dfs(int index, int start, int and) {
        if (n.length - index < a.length - start) {
            return Integer.MAX_VALUE / 2;
        }
        if (index == n.length - 1 && a.length - 1 == start) {
            return (and & n[index]) == a[start] ? n[index] : Integer.MAX_VALUE / 2;
        }
        long key = (index << 36) | (start << 32) | and;
        if (memo.containsKey(key)) {
            return memo.get(key);
        }
        int result = dfs(index + 1, start, and & n[index]);
        if ((and & n[index]) == a[start]) {
            result = Math.min(result, n[index] + dfs(index + 1 ,start + 1, -1));
        }
        memo.put(key, result);
        return result;
    }
}

//total_testcases:512
//total_correct:9
//input_formatted:[1,3,2,4,7,5,3]
[0,5,3]
//expected_output:12
//code_output:10
//last_testcase:[1,3,2,4,7,5,3]
[0,5,3]
