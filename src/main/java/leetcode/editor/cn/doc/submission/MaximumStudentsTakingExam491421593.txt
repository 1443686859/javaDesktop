class Solution {
    public int maxStudents(char[][] seats) {
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < seats.length; i++) {
            for (int j = 0; j < seats[i].length; j++) {
                if (seats[i][j] == '.') {
                    list.add(i * seats[0].length + j);
                }
            }
        }
        return dfs(0L, seats, list, 0);
    }
    public int dfs(long mask, char[][] seats, List<Integer> list, int index) {
        if (index == list.size()) {
            return 0;
        }
        long tempMask = mask;
        int y = seats[0].length;
        int current = list.get(index);
        boolean in = true;
        if ((current + 1) % y != 0 && current - y + 1 >= 0 && (mask & (1 << (current - y + 1))) != 0) {
            in = false;
        }
        if (current % y != 0 && (current - 1 >= 0 && (mask & (1 << (current - 1))) != 0 || current - y - 1 >= 0 && (mask & (1 << (current - y - 1))) != 0)) {
            in = false;
        }
        int temp = 0;
        if (in) {
            temp = dfs(mask | 1<< current, seats, list, index + 1) + 1;
        }
        int result =  dfs(tempMask, seats, list, index + 1);

        return Math.max(result, temp);
    }
}

//total_testcases:55
//total_correct:47
//input_formatted:[["#",".","#","#","#","."],["#",".","#",".",".","."],["#","#","#","#","#","."],["#",".",".","#","#","#"],[".","#",".","#","#","#"],[".","#","#","#",".","#"]]
//expected_output:11
//code_output:10
//last_testcase:[["#",".","#","#","#","."],["#",".","#",".",".","."],["#","#","#","#","#","."],["#",".",".","#","#","#"],[".","#",".","#","#","#"],[".","#","#","#",".","#"]]
