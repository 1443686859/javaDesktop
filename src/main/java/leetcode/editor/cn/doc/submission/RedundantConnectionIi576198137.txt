class Solution {
    public int[] findRedundantDirectedConnection(int[][] edges) {
        int[] p = new int[edges.length + 1];
        for (int i = 0; i < edges.length + 1; i++) {
            p[i] = i;
        }
        for (int[] e : edges) {
            if (findP(p, e[0]) == findP(p, e[1])) {
                return e;
            }
            merge(p, e[0], e[1]);
        }
        return null;

    }
    public int findP(int[] p, int i) {
        if (p[i] != i) {
            p[i] = findP(p, p[i]);
        }
        return p[i];
    }
    public void merge(int[] p, int i, int j) {
        int pJ = findP(p, j);
        p[pJ] = findP(p, i);
    }
}
//total_testcases:56
//total_correct:17
//input_formatted:[[2,1],[3,1],[4,2],[1,4]]
//expected_output:[2,1]
//code_output:[1,4]
//last_testcase:[[2,1],[3,1],[4,2],[1,4]]
