class Solution {
    public int minOperationsMaxProfit(int[] customers, int boardingCost, int runningCost) {
        if (4 * boardingCost < runningCost) {
            return -1;
        }
        int max = 0;
        int index = -1;
        int temp = 0;
        int pre = 0;
        int sum = 0;
        for (int i = 0; i < customers.length; i++) {
            int current = customers[i] + pre;
            if (current >= 4) {
                pre = current % 4;
                temp += current / 4;
                sum += (current - pre) * boardingCost - (current / 4) * runningCost;
                if (sum > max) {
                    max = sum;
                    index = temp;
                }
            } else {
                pre = 0;
                temp++;
                 sum += (current * boardingCost - runningCost);
                if (sum > max) {
                    max = sum;
                    index = temp;
                }
            }
        }
        if (pre != 0) {
            sum += (pre * boardingCost - runningCost);
            temp++;
            if (sum > max) {
                max = sum;
                index = temp;
            }
        }
        return index;
    }
}

//total_testcases:144
//total_correct:30
//input_formatted:[19,42,25,18,34,24,22,11,38,33,50,33,50,26,10,4,46,5,3,50,38,20,13,1,28,6,37,11,1,9,39,13,4,14,3,39,39,0,16,11,12,16,2,28,46,33,49,43,9,23,43,40]
35
96
//expected_output:307
//code_output:309
//last_testcase:[19,42,25,18,34,24,22,11,38,33,50,33,50,26,10,4,46,5,3,50,38,20,13,1,28,6,37,11,1,9,39,13,4,14,3,39,39,0,16,11,12,16,2,28,46,33,49,43,9,23,43,40]
35
96
