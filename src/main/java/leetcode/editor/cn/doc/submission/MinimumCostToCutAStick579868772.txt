class Solution {
        int[] t;
        int[][] memo;
    public int minCost(int n, int[] cuts) {
        int[] target = new int[cuts.length + 2];
        target[0] = 0;
        Arrays.sort(cuts);
        target[target.length - 1] = n;
        for (int i = 0; i < cuts.length; i++) {
            target[i + 1] = cuts[i];
        }
        t = target;
        memo = new int[target.length][target.length];
        for (int[] m : memo) {
            Arrays.fill(m, -1);
        }
        return dfs(0, target.length - 1, target);
    }
    public int dfs(int start, int end, int[] target) {
        if (start == end - 1) {
            return 0;
        }
        if (memo[start][end] != -1) {
            return memo[start][end];
        }
        int base = target[end] - target[start];
        int l = end - start - 1;
        int temp = Integer.MAX_VALUE;

        int index = (end + start) / 2;
        temp = dfs(start, index, target) + dfs(index, end, target);
        if ((l & 1) == 0) {
            temp = Math.min(dfs(start, index + 1, target) + dfs(index + 1, end, target), temp);
        }

//        int temp = Integer.MAX_VALUE;
//        for (int i = start + 1; i < end; i++) {
//            temp = Math.min(temp, dfs(start, i, target) + dfs(i, end, target));
//        }
        return memo[start][end] = base + temp;
    }
}

//total_testcases:101
//total_correct:15
//input_formatted:20
[13,6,7,2,10]
//expected_output:50
//code_output:51
//last_testcase:20
[13,6,7,2,10]
