class Solution {
    public int minFlips(int[][] grid) {
        int count = 0;
        for (int i = 0; i < grid.length/ 2; i++) {
            for (int j = 0; j < grid[i].length / 2; j++) {
                int ni = grid.length - 1 - i;
                int nj = grid[i].length - 1 - j;
                int temp = grid[i][j] + grid[ni][nj] + grid[i][nj] + grid[ni][j];
                if (temp == 4 || temp == 0) {
                    continue;
                }
                count += Math.min(temp , 4 - temp);
            }
        }
        int n = grid.length;
        int m = grid[0].length;
        int rest = 0;
        int temp = 0;
        if ((n & 1) != 0 && (m & 1) != 0) {
            count += grid[n / 2][m / 2];
        } else if ((n & 1) != 0) {
            int i = n  / 2;
            int sum = 0;
            for (int j = 0; j < grid[i].length; j++) {
                sum += grid[i][j];
                if (grid[i][j] == grid[i][grid[0].length - 1 - j] && grid[i][j] == 1) {
                    temp++;
                }
            }
            rest= sum - temp;

        } else if ((m & 1) != 0) {
            int j = m  / 2;
            int sum = 0;
            for (int i = 0; i < grid.length; i++) {
                sum += grid[i][j];
                if (grid[i][j] == grid[grid.length - 1 - i][j] && grid[i][j] == 1) {
                    temp++;
                }
            }
            rest= sum - temp;
        }
        if (rest > 0) {
            count += rest;
        } else {
            count += temp % 4;
        }
        return count ;
    }
}

//total_testcases:661
//total_correct:505
//input_formatted:[[1,0,0],[0,0,1],[0,0,1]]
//expected_output:3
//code_output:2
//last_testcase:[[1,0,0],[0,0,1],[0,0,1]]
