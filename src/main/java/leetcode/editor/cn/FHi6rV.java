//Âú® `n*m` Â§ßÂ∞èÁöÑÊ£ãÁõò‰∏≠ÔºåÊúâÈªëÁôΩ‰∏§ÁßçÊ£ãÂ≠êÔºåÈªëÊ£ãËÆ∞‰ΩúÂ≠óÊØç `"X"`, ÁôΩÊ£ãËÆ∞‰ΩúÂ≠óÊØç `"O"`ÔºåÁ©∫‰Ωô‰ΩçÁΩÆËÆ∞‰Ωú `"."`„ÄÇÂΩìËêΩ‰∏ãÁöÑÊ£ãÂ≠ê‰∏éÂÖ∂‰ªñÁõ∏ÂêåÈ¢úËâ≤ÁöÑÊ£ã
//Â≠êÂú®Ë°å„ÄÅÂàóÊàñÂØπËßíÁ∫øÂÆåÂÖ®ÂåÖÂõ¥Ôºà‰∏≠Èó¥‰∏çÂ≠òÂú®Á©∫ÁôΩ‰ΩçÁΩÆÔºâÂè¶‰∏ÄÁßçÈ¢úËâ≤ÁöÑÊ£ãÂ≠êÔºåÂàôÂèØ‰ª•ÁøªËΩ¨Ëøô‰∫õÊ£ãÂ≠êÁöÑÈ¢úËâ≤„ÄÇ
//
//![1.gif](https://pic.leetcode-cn.com/1630396029-eTgzpN-6da662e67368466a96d203
//f67bb6e793.gif){:height=170px}![2.gif](https://pic.leetcode-cn.com/1630396240-
//nMvdcc-8e4261afe9f60e05a4f740694b439b6b.gif){:height=170px}![3.gif](https://pic.
//leetcode-cn.com/1630396291-kEtzLL-6fcb682daeecb5c3f56eb88b23c81d33.gif){:height=170
//px}
//
//„ÄåÂäõÊâ£ÊåëÊàòËµõ„ÄçÈªëÁôΩÁøªËΩ¨Ê£ãÈ°πÁõÆ‰∏≠ÔºåÂ∞ÜÊèê‰æõÁªôÈÄâÊâã‰∏Ä‰∏™Êú™ÂΩ¢ÊàêÂèØÁøªËΩ¨Ê£ãÂ≠êÁöÑÊ£ãÁõòÊÆãÂ±ÄÔºåÂÖ∂Áä∂ÊÄÅËÆ∞‰Ωú `chessboard`„ÄÇËã•‰∏ã‰∏ÄÊ≠•ÂèØÊîæÁΩÆ‰∏ÄÊûöÈªëÊ£ãÔºåËØ∑ÈóÆÈÄâÊâãÊúÄÂ§öËÉΩÁøªËΩ¨
//Â§öÂ∞ëÊûöÁôΩÊ£ã„ÄÇ
//
//**Ê≥®ÊÑèÔºö**
//- Ëã•ÁøªËΩ¨ÁôΩÊ£ãÊàêÈªëÊ£ãÂêéÔºåÊ£ãÁõò‰∏ä‰ªçÂ≠òÂú®ÂèØ‰ª•ÁøªËΩ¨ÁöÑÁôΩÊ£ãÔºåÂ∞ÜÂèØ‰ª• **ÁªßÁª≠** ÁøªËΩ¨ÁôΩÊ£ã
//- ËæìÂÖ•Êï∞ÊçÆ‰øùËØÅÂàùÂßãÊ£ãÁõòÁä∂ÊÄÅÊó†ÂèØ‰ª•ÁøªËΩ¨ÁöÑÊ£ãÂ≠ê‰∏îÂ≠òÂú®Á©∫‰Ωô‰ΩçÁΩÆ
//
//**Á§∫‰æã 1Ôºö**
//
//> ËæìÂÖ•Ôºö`chessboard = ["....X.","....X.","XOOO..","......","......"]`
//>
//> ËæìÂá∫Ôºö`3`
//>
//> Ëß£ÈáäÔºö
//> ÂèØ‰ª•ÈÄâÊã©‰∏ãÂú® `[2,4]` Â§ÑÔºåËÉΩÂ§üÁøªËΩ¨ÁôΩÊñπ‰∏âÊûöÊ£ãÂ≠ê„ÄÇ
//
//**Á§∫‰æã 2Ôºö**
//
//> ËæìÂÖ•Ôºö`chessboard = [".X.",".O.","XO."]`
//>
//> ËæìÂá∫Ôºö`2`
//>
//> Ëß£ÈáäÔºö
//> ÂèØ‰ª•ÈÄâÊã©‰∏ãÂú® `[2,2]` Â§ÑÔºåËÉΩÂ§üÁøªËΩ¨ÁôΩÊñπ‰∏§ÊûöÊ£ãÂ≠ê„ÄÇ
//> ![2126c1d21b1b9a9924c639d449cc6e65.gif](https://pic.leetcode-cn.com/16266832
//55-OBtBud-2126c1d21b1b9a9924c639d449cc6e65.gif)
//
//**Á§∫‰æã 3Ôºö**
//
//> ËæìÂÖ•Ôºö`chessboard = [".......",".......",".......","X......",".O.....","..O....
//","....OOX"]`
//>
//> ËæìÂá∫Ôºö`4`
//>
//> Ëß£ÈáäÔºö
//> ÂèØ‰ª•ÈÄâÊã©‰∏ãÂú® `[6,3]` Â§ÑÔºåËÉΩÂ§üÁøªËΩ¨ÁôΩÊñπÂõõÊûöÊ£ãÂ≠ê„ÄÇ
//> ![803f2f04098b6174397d6c696f54d709.gif](https://pic.leetcode-cn.com/16303937
//70-Puyked-803f2f04098b6174397d6c696f54d709.gif)
//
//**ÊèêÁ§∫Ôºö**
//- `1 <= chessboard.length, chessboard[i].length <= 8`
//- `chessboard[i]` ‰ªÖÂåÖÂê´ `"."„ÄÅ"O"` Âíå `"X"`
//
// Related Topics ÂπøÂ∫¶‰ºòÂÖàÊêúÁ¥¢ Êï∞ÁªÑ Áü©Èòµ üëç 65 üëé 0

package leetcode.editor.cn; //Â¶ÇÊûú‰Ω†ÁöÑÁÆóÊ≥ïÈ¢òÊòØ‰∏≠ÊñáÁöÑÔºåÂêéÁºÄÂ∞±ÊòØcnÔºåÂ¶ÇÊûúÊòØËã±ÊñáÁöÑÂ∞±ÊòØen

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

/**
 * @author  YourName
 * @date 2023-06-21 23:14:57
 */
public class FHi6rV {
    public static void main(String[] args) {
        Solution solution = new FHi6rV().new Solution();
        System.out.println(solution.flipChess(new String[]{
                ".......", "X......", ".O.....", "..O...X", "...OOOX", "....O..", "...OOOX"
        }));
    }
//leetcode submit region begin(Prohibit modification and deletion)

    class Solution {
        private int m;
        private int n;
        private String[] chessboard;

        public int flipChess(String[] chessboard) {
            m = chessboard.length;
            n = chessboard[0].length();
            this.chessboard = chessboard;
            int ans = 0;
            for (int i = 0; i < m; ++i) {
                for (int j = 0; j < n; ++j) {
                    if (chessboard[i].charAt(j) == '.') {
                        ans = Math.max(ans, bfs(i, j));
                    }
                }
            }
            return ans;
        }

        private int bfs(int i, int j) {
            Deque<int[]> q = new ArrayDeque<>();
            q.offer(new int[]{i, j});
            char[][] g = new char[m][0];
            for (int k = 0; k < m; ++k) {
                g[k] = chessboard[k].toCharArray();
            }
            g[i][j] = 'X';
            int cnt = 0;
            while (!q.isEmpty()) {
                int[] p = q.poll();
                i = p[0];
                j = p[1];
                for (int a = -1; a <= 1; ++a) {
                    for (int b = -1; b <= 1; ++b) {
                        if (a == 0 && b == 0) {
                            continue;
                        }
                        int x = i + a, y = j + b;
                        while (x >= 0 && x < m && y >= 0 && y < n && g[x][y] == 'O') {
                            x += a;
                            y += b;
                        }
                        if (x >= 0 && x < m && y >= 0 && y < n && g[x][y] == 'X') {
                            x -= a;
                            y -= b;
                            cnt += Math.max(Math.abs(x - i), Math.abs(y - j));
                            while (x != i || y != j) {
                                g[x][y] = 'X';
                                q.offer(new int[]{x, y});
                                x -= a;
                                y -= b;
                            }
                        }
                    }
                }
            }
            return cnt;
        }
    }

//leetcode submit region end(Prohibit modification and deletion)
}

