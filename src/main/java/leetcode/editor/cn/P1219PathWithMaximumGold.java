package leetcode.editor.cn;
//‰Ω†Ë¶ÅÂºÄÂèë‰∏ÄÂ∫ßÈáëÁüøÔºåÂú∞Ë¥®ÂãòÊµãÂ≠¶ÂÆ∂Â∑≤ÁªèÊé¢Êòé‰∫ÜËøôÂ∫ßÈáëÁüø‰∏≠ÁöÑËµÑÊ∫êÂàÜÂ∏ÉÔºåÂπ∂Áî®Â§ßÂ∞è‰∏∫ m * n ÁöÑÁΩëÊ†º grid ËøõË°å‰∫ÜÊ†áÊ≥®„ÄÇÊØè‰∏™ÂçïÂÖÉÊ†º‰∏≠ÁöÑÊï¥Êï∞Â∞±Ë°®Á§∫Ëøô‰∏ÄÂçïÂÖÉÊ†º‰∏≠ÁöÑÈªÑ
//ÈáëÊï∞ÈáèÔºõÂ¶ÇÊûúËØ•ÂçïÂÖÉÊ†ºÊòØÁ©∫ÁöÑÔºåÈÇ£‰πàÂ∞±ÊòØ 0„ÄÇ 
//
// ‰∏∫‰∫Ü‰ΩøÊî∂ÁõäÊúÄÂ§ßÂåñÔºåÁüøÂ∑•ÈúÄË¶ÅÊåâ‰ª•‰∏ãËßÑÂàôÊù•ÂºÄÈááÈªÑÈáëÔºö 
//
// 
// ÊØèÂΩìÁüøÂ∑•ËøõÂÖ•‰∏Ä‰∏™ÂçïÂÖÉÔºåÂ∞±‰ºöÊî∂ÈõÜËØ•ÂçïÂÖÉÊ†º‰∏≠ÁöÑÊâÄÊúâÈªÑÈáë„ÄÇ 
// ÁüøÂ∑•ÊØèÊ¨°ÂèØ‰ª•‰ªéÂΩìÂâç‰ΩçÁΩÆÂêë‰∏ä‰∏ãÂ∑¶Âè≥Âõõ‰∏™ÊñπÂêëËµ∞„ÄÇ 
// ÊØè‰∏™ÂçïÂÖÉÊ†ºÂè™ËÉΩË¢´ÂºÄÈááÔºàËøõÂÖ•Ôºâ‰∏ÄÊ¨°„ÄÇ 
// ‰∏çÂæóÂºÄÈááÔºàËøõÂÖ•ÔºâÈªÑÈáëÊï∞ÁõÆ‰∏∫ 0 ÁöÑÂçïÂÖÉÊ†º„ÄÇ 
// ÁüøÂ∑•ÂèØ‰ª•‰ªéÁΩëÊ†º‰∏≠ ‰ªªÊÑè‰∏Ä‰∏™ ÊúâÈªÑÈáëÁöÑÂçïÂÖÉÊ†ºÂá∫ÂèëÊàñËÄÖÊòØÂÅúÊ≠¢„ÄÇ 
// 
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// ËæìÂÖ•Ôºögrid = [[0,6,0],[5,8,7],[0,9,0]]
//ËæìÂá∫Ôºö24
//Ëß£ÈáäÔºö
//[[0,6,0],
// [5,8,7],
// [0,9,0]]
//‰∏ÄÁßçÊî∂ÈõÜÊúÄÂ§öÈªÑÈáëÁöÑË∑ØÁ∫øÊòØÔºö9 -> 8 -> 7„ÄÇ
// 
//
// Á§∫‰æã 2Ôºö 
//
// ËæìÂÖ•Ôºögrid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
//ËæìÂá∫Ôºö28
//Ëß£ÈáäÔºö
//[[1,0,7],
// [2,0,6],
// [3,4,5],
// [0,3,0],
// [9,0,20]]
//‰∏ÄÁßçÊî∂ÈõÜÊúÄÂ§öÈªÑÈáëÁöÑË∑ØÁ∫øÊòØÔºö1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7„ÄÇ
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// 1 <= grid.length, grid[i].length <= 15 
// 0 <= grid[i][j] <= 100 
// ÊúÄÂ§ö 25 ‰∏™ÂçïÂÖÉÊ†º‰∏≠ÊúâÈªÑÈáë„ÄÇ 
// 
// Related Topics Êï∞ÁªÑ ÂõûÊ∫Ø Áü©Èòµ üëç 127 üëé 0

import java.util.ArrayDeque;
import java.util.Queue;

public class P1219PathWithMaximumGold{
    public static void main(String[] args) {
        Solution solution = new Solution();
        System.out.println(solution.getMaximumGold(new int[][]{{0,6,0},{5,8,7},{0,9,0}}));
    }
    //leetcode submit region begin(Prohibit modification and deletion)
    static class Solution {
    int[][] directions = new int[][]{
            {1, 0}, {-1, 0},{0,1},{0, -1}
    };
    int res = 0;
    int[][] grid;
    public int getMaximumGold(int[][] grid) {
        this.grid = grid;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] != 0) {
                    dfs(i, j, 0);
                }
            }
        }
        return res;
    }

    public void dfs(int x, int y, int currentResult) {

        int temp = grid[x][y];
        if (currentResult + temp > res) {
            res = currentResult + temp;
        }
        grid[x][y] = 0;
        for (int i = 0; i < directions.length; i++) {
            int nx = x + directions[i][0];
            int ny = y + directions[i][1];
            if  (nx < 0 || ny < 0 || ny >= grid[0].length || nx >= grid.length || grid[nx][ny] == 0) {
                continue;
            }
            dfs(nx, ny, currentResult + temp);
        }
        grid[x][y] = temp;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}